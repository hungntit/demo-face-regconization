AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  demo-face-regconization

  Sample SAM Template for demo-face-regconization
Parameters:
  CollectionId:
    Type: String
    Default: "demo-face-regconize"
  SenderEmail:
    Type: String
    Default: "hungnt.it@gmail.com"
  ReceiverEmail:
    Type: String
    Default: "hungnt.it@gmail.com"
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Resources:
  #Demo Api Gateway
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.7
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get
  
  # Detect Face
  
  DetectStrangeFaceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: face_regconize/
      Handler: detect_face_notify.lambda_handler
      Runtime: python3.7
      Events:
        NewFaceEvent:
          Type: S3
          Properties:
            Bucket: !Ref DetectFaceBucket
            Events: s3:ObjectCreated:*
      Policies:
        - Statement:
          - Sid: SendEmailPolicy
            Effect: Allow
            Action:
            - ses:SendRawEmail
            Resource: '*'
        - AWSLambdaExecute
        - RekognitionReadPolicy:
            CollectionId: !Ref CollectionId
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::AccountId}-demo-*"
      Environment:
        Variables:
          RECEIVER_EMAIL: !Ref ReceiverEmail
          SENDER_EMAIL: !Ref SenderEmail
          FACE_COLLECTION_ID: !Ref CollectionId
  AddFaceToCollectionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: face_regconize/
      Handler: add_face_to_collection.lambda_handler
      Runtime: python3.7
      Events:
        AddOwnerFaceEvent:
          Type: S3
          Properties:
            Bucket: !Ref OwnerImageBucket
            Events: s3:ObjectCreated:*
      Policies:
        - AWSLambdaExecute
        - RekognitionWriteOnlyAccessPolicy:
            CollectionId: !Ref CollectionId
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::AccountId}-demo-*"
      Environment:
        Variables:
          FACE_COLLECTION_ID: !Ref CollectionId
  RemoveFaceFromCollectionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: face_regconize/
      Handler: remove_face_from_collection.lambda_handler
      Runtime: python3.7
      Events:
        RemoveOwnerFaceEvent:
          Type: S3
          Properties:
            Bucket: !Ref OwnerImageBucket
            Events: s3:ObjectRemoved:Delete
      Policies:
        - AWSLambdaExecute
        - RekognitionWriteOnlyAccessPolicy:
            CollectionId: !Ref CollectionId
        - RekognitionReadPolicy:
            CollectionId: !Ref CollectionId
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::AccountId}-demo-*"
      Environment:
        Variables:
          FACE_COLLECTION_ID: !Ref CollectionId

  DetectFaceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-demo-detection-face"
  OwnerImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-demo-owner-face"
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
